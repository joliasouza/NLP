# -*- coding: utf-8 -*-
"""agent (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDRAY4kWgwq89p_iQdIaFPdZcwfD3yrV
"""

!pip install groq

import os
os.environ['GROQ_API_KEY'] = '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'

from groq import Groq

cliente = Groq(api_key = os.environ.get("GOQ_API_KEY"))

conclusao_chat = cliente.chat.completions.create(
    messages=[
        {
            "role": "user",
            "content": "Explain the importance of fast language models"
        }
    ],
    model = "llama-3.1-70b-versatile"
)

print(conclusao_chat.choices[0].message.content)

class Agent:
  def __init__(self, cliente, system):
    self.cliente = cliente
    self.system = system
    self.messages = []
    if self.system is not None:
      self.messages.append(
          {
              "role": "system",
              "content": self.system
          }
      )

  def __call__(self, mensagem=""):
    if mensagem:
      self.messages.append(
          {
              "role": "user",
              "content": mensagem
          }
      )
    resultado = self.execute()
    self.messages.append(
        {
            "role": "assistant",
            "content": resultado
        }
    )
    return resultado

  def execute(self):
    conclusao = cliente.chat.completions.create(
      messages= self.messages,
      model = "llama-3.1-70b-versatile"
    )
    return conclusao.choices[0].message.content

system_prompt = """
Você opera em um ciclo de Pensamento, Ação, PAUSA, Observação.
No final do ciclo, você fornece uma Resposta.
Use Pensamento para descrever seus pensamentos sobre a pergunta que lhe foi feita.
Use Ação para executar uma das ações disponíveis - depois retorne PAUSA.
A Observação será o resultado da execução dessas ações.

As ações disponíveis para você são:

calcular:
exemplo: calcular: 4 * 7 / 3
Executa um cálculo e retorna o número - usa Python, então certifique-se de usar a sintaxe de ponto flutuante, se necessário.

obter_massa_planeta:
exemplo: obter_massa_planeta: Terra
Retorna a massa do planeta em kg.

Sessão de exemplo:

Pergunta: Qual é a massa da Terra multiplicada por 2?
Pensamento: Preciso encontrar a massa da Terra.
Ação: obter_massa_planeta: Terra
PAUSA

Você será chamado novamente com isso:

Observação: 5.972e24

Pensamento: Preciso multiplicar isso por 2.
Ação: calcular: 5.972e24 * 2
PAUSA

Você será chamado novamente com isso:

Observação: 1,1944×10e25

Se você tiver a resposta, forneça-a como a Resposta.

Resposta: A massa da Terra multiplicada por 2 é 1,1944×10e25.

Agora é a sua vez:
""".strip()

#tools
def calcular(operacao):
  return eval(operacao)

def get_massa_planeta(planeta) -> float:
  match planeta.lower():
    case "terra":
      return 5.972e24
    case "jupiter":
      return 1.898e27
    case "marte":
      return 6.39e23
    case "mercurio":
      return 3.285e23
    case "netuno":
      return 1.024e26
    case "saturno":
      return 5.683e26
    case "urano":
      return 8.681e25
    case "venus":
      return 4.867e24
    case _:
      return None

neil_tyson = Agent(cliente, system_prompt)

resultado = neil_tyson("Qual é a massa da Terra multiplicada por 3?")
print(resultado)

neil_tyson.messages

observacao = get_massa_planeta("terra")
print(observacao)

proximo_prompt = f"Observação: {observacao}"
resultado = neil_tyson(proximo_prompt)
print(resultado)

neil_tyson.messages

resultado = neil_tyson()
print(resultado)

observacao = calcular("5.972e24 * 3")
print(observacao)

import re
resultado = '''
Ação: obter_massa_planeta: Terra
PAUSA
'''
acao = re.findall(r'Ação: ([a-z]+): (.+)', resultado, re.IGNORECASE)
print(acao)

def agent_loop(i_maximo, query: str = ""):
  agente = Agent(cliente, system_prompt)
  tools = ['calculate', 'get_planet_mass']
  proximo_prompt = query
  i = 0
  while i < i_maximo:
    i = i + 1
    resultado = agente(proximo_prompt)
    print(resultado)

    if "PAUSA" in resultado and "Ação":
      acao = re.findall(r'Ação: ([a-z]+): (.+)', resultado, re.IGNORECASE)
      tool_escolhida = acao[0][0]
      arg = acao[0][1]

      if tool_escolhida in tools:
        tool_resultado = eval(f"{tool_escolhida}('{arg}')")
        proximo_prompt = f"Observação: {tool_resultado}"
      else:
        proximo_prompt = "Observação: tool não encontrada"
      print(proximo_prompt)
      continue
    if "Resposta" in resultado:
      break

agent_loop(query = "Qual a massa da Terra mais a massa de Mercúrio vezes 5?")
